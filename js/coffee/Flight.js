// Generated by CoffeeScript 1.6.1
(function() {

  window.Flight = (function() {

    Flight._FLIGHTS_ARRAY;

    Flight._AIRPORT_MAP = [];

    Flight._AIRPORT_URL = new UrlBuilder('http://freberg.org/xmlproxy.php?url=', 'http://flydata.avinor.no/airportNames.asp?', '').build();

    function Flight(fo) {
      this.uniqueId = fo['@attributes']['uniqueID'];
      this.flightId = fo['flight_id'].toUpperCase();
      this.dom_int = fo['dom_int'];
      this.schedule_time = new Date(fo['schedule_time']);
      this.arr_dep = fo['arr_dep'];
      this.airport = fo['airport'];
      this.via_airport(fo);
      this.check_in(fo);
      this.gate(fo);
      this.status(fo);
    }

    Flight.prototype.via_airport = function(val) {
      if (val['airport'] != null) {
        this.via_airport = val['airport'];
      } else {
        this.via_airport = "";
      }
      return this;
    };

    Flight.prototype.check_in = function(val) {
      if (val['check_in'] != null) {
        this.check_in = val['check_in'];
      } else {
        this.check_in = "";
      }
      return this;
    };

    Flight.prototype.gate = function(val) {
      if (val['gate'] != null) {
        this.gate = val['gate'];
      } else {
        this.gate = "";
      }
      return this;
    };

    Flight.prototype.status = function(val) {
      var code, time;
      if (val['status'] != null) {
        code = val.status['@attributes'].code;
        time = val.status['@attributes'].time;
        if (code == null) {
          code = "";
        }
        if (time == null) {
          time = "";
        }
        this.status_code = code;
        this.status_time = time;
      } else {
        this.status_code = "";
        this.status_time = "";
      }
      return this;
    };

    Flight.fetchFlights = function(url, callback, errorCallback) {
      if (!window.navigator.onLine) {
        if (errorCallback != null) {
          errorCallback('Er ikke koblet til internett. Kan ikke hente fly');
        }
        if (callback != null) {
          Flight._FLIGHTS_ARRAY = new Array();
          return callback(Flight._FLIGHTS_ARRAY);
        }
      }
      return jQuery.ajax({
        url: url,
        dataType: 'jsonp',
        jsonp: 'jsonp',
        jsonpCallback: 'jsonCallback',
        error: function(a, b, e) {
          alert(e);
          return console.log(e);
        },
        success: function(data) {
          var f, tmpFlight, _i, _len, _ref, _results;
          Flight._FLIGHTS_ARRAY = new Array();
          _ref = data['flights']['flight'];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            tmpFlight = new Flight(f);
            _results.push(Flight._FLIGHTS_ARRAY.push(tmpFlight));
          }
          return _results;
        },
        complete: function() {
          Flight._FLIGHTS_ARRAY.sort(function(aa, bb) {
            if (aa.flightId < bb.flightId) {
              return -1;
            } else if (aa.flightId > bb.flightId) {
              return 1;
            } else {
              return 0;
            }
          });
          return callback(Flight._FLIGHTS_ARRAY);
        }
      });
    };

    Flight.getFlightsById = function(id, count) {
      var e, num, tmpLst, _i, _len, _ref;
      if (Flight._FLIGHTS_ARRAY != null) {
        tmpLst = new Array();
        id = id.toUpperCase();
        num = 0;
        _ref = Flight._FLIGHTS_ARRAY;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          if (id === e.flightId.substring(0, id.length)) {
            tmpLst.push(e);
            num++;
          }
          if (num >= count) {
            break;
          }
        }
      } else {
        throw new Error("Har ikke hentet ned flyinformasjon");
      }
      return tmpLst;
    };

    /*
      First checks the @_AIRPORT_MAP for entries with the given id, if not there, @_fetchAirportNameById(id, callback) will be called.
    */


    Flight.getAirportNameById = function(id, callback, errorCallback) {
      var flight;
      id = id.toUpperCase().trim();
      try {
        flight = Flight._AIRPORT_MAP[id];
        if (flight == null) {
          return this._fetchAirportNameById(id, callback, errorCallback);
        } else {
          return callback(flight);
        }
      } catch (error) {
        Flight._AIRPORT_MAP[id] = id;
        errorCallback('Feil ved henting av flyplass, bruker flyplass kode');
        return callback(id);
      }
    };

    /*
      Requests the name of an airport where id == code. Sends result back to callback provided as param, and stores the value in @_AIRPORT_MAP
    */


    Flight._fetchAirportNameById = function(id, completeCallback, errorCallback) {
      var dataHolder, url;
      if (!window.navigator.onLine) {
        if (errorCallback != null) {
          errorCallback('Er ikke koblet til internett, bruker flyplass koder');
        }
        if (completeCallback != null) {
          return completeCallback(id);
        }
      }
      dataHolder = "";
      url = Flight._AIRPORT_URL += id;
      return jQuery.ajax({
        url: url,
        dataType: 'jsonp',
        jsonp: 'jsonp',
        jsonpCallback: 'jsonCallback',
        error: function(a, b, e) {
          return console.log(e);
        },
        success: function(data) {
          return dataHolder = data;
        },
        complete: function() {
          var airportName, tmp;
          airportName = id;
          try {
            tmp = dataHolder['airportName']['@attributes']['name'];
            Flight._AIRPORT_MAP[id] = tmp;
            airportName = tmp;
          } catch (e) {
            if (errorCallback != null) {
              errorCallback('Feil ved henting av flyplass, bruker flyplass kode');
            }
          }
          if ((airportName != null) && (completeCallback != null)) {
            return completeCallback(airportName);
          }
        }
      });
    };

    return Flight;

  })();

  /*
    lastUpdate      - o   // Følger med hele objektet, ikke hver enkelt entry
    uniqueId        - o   // Ligger under Attributes
    flightId        - o
    dom_int         - o
    schedule_time   - o
    arr_dep         - o
    airport         - o   // Dersom Arr_dep == A så viser den hvor den kom fra, dersom App_dep == D viser den hvor den skal
    airline         - o   // Viser IATA koden for flyselskapet
    via_airport     - io  // Viser eventuelle mellomlandinger, max 6 IATA koder skilt med ','
    check_in        - io  // Viser innsjekkingsområde (bare tilgjengelig for oslo lufthavn)
    gate            - io  // Viser gatenummer. Kan inneholde både tall og bokstaver
    status_code     - io  // viser status for flyet:
                              A = Arrived
                              C = Innstilt (Canceled)
                              D = Avreist (Departed)
                              E = Ny Tid (New Time)
                              N = Ny Info (New Info)
    status_time     - io  // Attributt "time" på elementet status gir statustindspunkt for et flight.
    belt_number     - io  // Angir hvilket bagasjebånd som benyttes for et flight
  */


}).call(this);
